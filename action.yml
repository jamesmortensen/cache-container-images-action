name: 'Cache Container Images Action'
description: ''
author: 'James Mortensen'
inputs:
  runtime:
    description: 'Container runtime engine'
    required: false
    default: 'podman'
  images:
    description: 'Container images to pull and cache'
    required: true
  prefix-key:
    description: 'The cache namespace. change the value to force a container image cache miss.'
    required: false
    default: 'podman-cache'
outputs:
  cache-hit:
    description: "True if container images were found and pulled from the cache"
    value: ${{ steps.container-images-cache.outputs.cache-hit }}
runs:
  using: 'composite'
  steps:
  - name: Validate runner
    if: runner.os != 'Linux' && runner.os != 'macOS'
    run: |
      echo "${RUNNER_OS} is not supported. Only Linux is supported at this time."
      exit 1
    shell: bash
  - name: Validate inputs
    if: inputs.runtime != 'podman'
    run: |
      echo "${{ inputs.runtime }} is not supported. Only podman is supported at this time. If you"
      echo "build your containers with Docker and push them to Docker Hub, you can still use podman"
      echo "in GitHub Actions, since container images are a standard across different runtime engines."
      exit 1
    shell: bash
      
  - name: Get the last updated times for the container images to build key
    shell: bash
    env:
      CONTAINER_IMAGES: ${{ inputs.images }}
      CONTAINER_IMAGES_PREFIX_KEY: ${{ inputs.prefix-key }}
    run: |
      echo "Home = " $HOME
      echo "PWD = " $PWD
      echo "CONTAINER_IMAGES="$CONTAINER_IMAGES
      # make sure this file is empty, in case action is used multiple times in the same job.
      rm -f container-images-key.txt && touch container-images-key.txt
      export IMAGES_URIS=`echo $CONTAINER_IMAGES | sed 's/:/\/tags\//g'`
      echo "Images URIS="$IMAGES_URIS
      echo $IMAGES_URIS | tr " " "\n" >> container-images-uris.txt
      echo $CONTAINER_IMAGES | tr " " "\n" >> container-images.txt
      cat container-images-uris.txt
      cat container-images-uris.txt | while read line ; do echo "Checking last updated time for https://hub.docker.com/v2/repositories/$line/" ; done
      # Get last updated time from DockerHub, and add in inputs.prefix-key if it is specified.
      cat container-images-uris.txt | while read line ; do echo $CONTAINER_IMAGES_PREFIX_KEY-`go run $GITHUB_ACTION_PATH/get-last-updated.go https://hub.docker.com/v2/repositories/$line/` >> container-images-key.txt ; done
      echo "Cache keys: "
      cat container-images-key.txt
      echo "\n"

  - name: Check Container Images Cache 
    id: get-last-updated
    uses: actions/cache@v2
    with:
      path: cached-container-images.tar
      key: ${{ runner.os }}-${{ hashFiles('**/container-images-key.txt') }}
 
  - name: Pull Container Image if cache miss
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit != 'true'
    run: |
      echo "Since there was a cache miss, we will pull..."
      echo "Start pulling images at " `date`
      cat container-images.txt | while read line ; do podman pull $line ; done
      echo "Done pulling images at " `date`

  - name: Archive Container Images if cache miss
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit != 'true'
    run: | 
      echo "Start archiving images at " `date`
      export OLD_PWD=$PWD
      cd $HOME
      sudo tar cf $OLD_PWD/cached-container-images.tar .local/share/containers/storage/
      sudo chown runner:docker $OLD_PWD/cached-container-images.tar
      cd $OLD_PWD
      echo "Done compression at " `date` 
 
  - name: Extract tarball if found in cache
    shell: bash
    if: steps.get-last-updated.outputs.cache-hit == 'true'
    run: |
      echo "Start extracting images at " `date`
      mkdir -p ~/.local/share/containers/
      sudo tar xf cached-container-images.tar -C $HOME
      echo "Done extracting images at " `date`
      
  - name: Set cache-hit output
    id: container-images-cache
    shell: bash
    env:
      CONTAINER_IMAGES_CACHE_HIT: ${{ steps.get-last-updated.outputs.cache-hit }}
    run: |
      echo "cache-hit=$CONTAINER_IMAGES_CACHE_HIT" >> $GITHUB_OUTPUT
      